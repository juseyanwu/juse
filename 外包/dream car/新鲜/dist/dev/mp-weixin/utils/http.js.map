{"version":3,"file":"http.js","sources":["../../../../src/utils/http.ts"],"sourcesContent":["/**\n * 添加拦截器:\n *   拦截 request 请求\n *   拦截 uploadFile 文件上传\n *\n * TODO:\n *   1. 非 http 开头需拼接地址\n *   2. 请求超时\n *   3. 添加小程序端请求头标识\n *   4. 添加 token 请求头标识\n */\n\nimport { useMemberStore } from '@/stores'\n\nconst baseURL = 'https://pcapi-xiaotuxian-front-devtest.itheima.net'\n\n// 添加拦截器\nconst httpInterceptor = {\n  // 拦截前触发\n  invoke(options: UniApp.RequestOptions) {\n    // 1. 非 http 开头需拼接地址\n    if (!options.url.startsWith('http')) {\n      options.url = baseURL + options.url\n    }\n    // 2. 请求超时, 默认 60s\n    options.timeout = 10000\n    // 3. 添加小程序端请求头标识\n    options.header = {\n      ...options.header,\n      'source-client': 'miniapp',\n    }\n    // 4. 添加 token 请求头标识\n    const memberStore = useMemberStore()\n    const token = memberStore.profile?.token\n    if (token) {\n      options.header.Authorization = token\n    }\n  },\n}\nuni.addInterceptor('request', httpInterceptor)\nuni.addInterceptor('uploadFile', httpInterceptor)\n\n/**\n * 请求函数\n * @param  UniApp.RequestOptions\n * @returns Promise\n *  1. 返回 Promise 对象\n *  2. 获取数据成功\n *    2.1 提取核心数据 res.data\n *    2.2 添加类型，支持泛型\n *  3. 获取数据失败\n *    3.1 401错误  -> 清理用户信息，跳转到登录页\n *    3.2 其他错误 -> 根据后端错误信息轻提示\n *    3.3 网络错误 -> 提示用户换网络\n */\ninterface Data<T> {\n  code: string\n  msg: string\n  result: T\n}\nexport const http = <T>(options: UniApp.RequestOptions) => {\n  return new Promise<Data<T>>((resolve, reject) => {\n    uni.request({\n      ...options,\n      success: (res) => {\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          resolve(res.data as Data<T>)\n        } else if (res.statusCode === 401) {\n          const memberStore = useMemberStore()\n          memberStore.clearProfile()\n          uni.navigateTo({\n            url: '/pages/login/login',\n          })\n          reject(res)\n        } else {\n          uni.showToast({\n            title: (res.data as Data<T>).msg || '未知错误',\n            icon: 'none',\n          })\n          reject(res)\n        }\n      },\n      fail(err) {\n        uni.showToast({\n          icon: 'none',\n          title: '网络错误',\n        })\n        reject(err)\n      },\n    })\n  })\n}\n"],"names":["useMemberStore","uni"],"mappings":";;;;AAcA,MAAM,UAAU;AAGhB,MAAM,kBAAkB;AAAA;AAAA,EAEtB,OAAO,SAAgC;;AAErC,QAAI,CAAC,QAAQ,IAAI,WAAW,MAAM,GAAG;AAC3B,cAAA,MAAM,UAAU,QAAQ;AAAA,IAClC;AAEA,YAAQ,UAAU;AAElB,YAAQ,SAAS;AAAA,MACf,GAAG,QAAQ;AAAA,MACX,iBAAiB;AAAA,IAAA;AAGnB,UAAM,cAAcA,sBAAAA;AACd,UAAA,SAAQ,iBAAY,YAAZ,mBAAqB;AACnC,QAAI,OAAO;AACT,cAAQ,OAAO,gBAAgB;AAAA,IACjC;AAAA,EACF;AACF;AACAC,cAAAA,MAAI,eAAe,WAAW,eAAe;AAC7CA,cAAAA,MAAI,eAAe,cAAc,eAAe;AAoBnC,MAAA,OAAO,CAAI,YAAmC;AACzD,SAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC/CA,kBAAAA,MAAI,QAAQ;AAAA,MACV,GAAG;AAAA,MACH,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,cAAc,OAAO,IAAI,aAAa,KAAK;AACjD,kBAAQ,IAAI,IAAe;AAAA,QAAA,WAClB,IAAI,eAAe,KAAK;AACjC,gBAAM,cAAcD,sBAAAA;AACpB,sBAAY,aAAa;AACzBC,wBAAAA,MAAI,WAAW;AAAA,YACb,KAAK;AAAA,UAAA,CACN;AACD,iBAAO,GAAG;AAAA,QAAA,OACL;AACLA,wBAAAA,MAAI,UAAU;AAAA,YACZ,OAAQ,IAAI,KAAiB,OAAO;AAAA,YACpC,MAAM;AAAA,UAAA,CACP;AACD,iBAAO,GAAG;AAAA,QACZ;AAAA,MACF;AAAA,MACA,KAAK,KAAK;AACRA,sBAAAA,MAAI,UAAU;AAAA,UACZ,MAAM;AAAA,UACN,OAAO;AAAA,QAAA,CACR;AACD,eAAO,GAAG;AAAA,MACZ;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AACH;;"}